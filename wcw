#!/usr/bin/perl


###################################################################
#
#   web-content-watcher (wcw)
#
###################################################################
#
#   A program which watches websites and notifies on changes
#
#   https://github.com/wopfel/web-content-watcher
#
#   Copyright (c) 2018 Bernd Arnold
#   See LICENSE file for details
#
###################################################################


use strict;
use warnings;
use YAML::Tiny;
use LWP::Simple;



# Read directory with yaml files
opendir( my $dh, "./websites" ) || die "Can't open directory";
my @files = grep { ! /^\./ && /.*\.ya?ml$/ && -f "./websites/$_" } readdir $dh;
closedir $dh;


# Read directory with hook files
opendir( my $hook_dh, "./hooks" ) || die "Can't open hooks directory";
my @hook_files = grep { ! /^\./ && /.*\.hook$/ && -f "./hooks/$_" && -x _ } readdir $hook_dh;
closedir $hook_dh;


# Process each file
for my $file ( sort @files ) {

    print "Processing file $file...\n";

    # Strip ".yml" (or ".yaml) extension
    ( my $basefilename ) = $file =~ /^(.*)\.ya?ml$/;

    # Reading content of config file
    my $yaml = YAML::Tiny->read( "./websites/$file" );

    # Retrieved content (either by url or by cmd)
    my $current_content;

    if ( my $url = $yaml->[0]->{url} ) {
        # Url parameter was specified
        # Retrieve content of website
        $current_content = get( $url );
    } elsif ( my $cmd = $yaml->[0]->{cmd} ) {
        # Cmd parameter was specified
        # Execute the command
        $current_content = qx/ $cmd /;
    } else {
        die "Neither URL nor CMD specified";
    }

    # The persistent content (on disk)
    my $persistent_content = "";
    my $persistent_filename = "./saved-content/$basefilename.current";
    # The previous (old) persistent content (on disk)
    my $old_filename        = "./saved-content/$basefilename.old";

    # Check if file with previous content exists
    if ( ! -f $persistent_filename ) {
        print "File '$persistent_filename' didn't exist.\n";
        # no further action
    } else {
        {
            # Read complete file
            local $/;
            open( my $persistent_fh, "<", $persistent_filename ) || die "Can't open file";
            $persistent_content = <$persistent_fh>;
            close $persistent_fh;
        }
    }

    # Compare old with current content
    my $has_changed = $persistent_content ne $current_content;

    if ( $has_changed ) {
        # Something changed
        print "Content has changed.\n";
        # Rename file to ".old"
        rename $persistent_filename, $old_filename;
        # Store content
        open( my $persistent_fh, ">", $persistent_filename ) || die "Can't open output file";
        print $persistent_fh $current_content;
        close $persistent_fh;
    } else {
        print "No new content.\n";
    }

    # Process hooks
    for my $hook ( sort @hook_files ) {
        # File path to hook file
        my $hook_path = "./hooks/$hook";
        print "Calling hook file '$hook'.\n";
        # Building args
        my @args = ( $hook_path,
                     ( $has_changed ? "changed" : "unchanged" ),
                     $basefilename,
                     $persistent_filename
                   );
        # Pass filename with old content if content has changed
        push @args, $old_filename  if  $has_changed;
        # Execute hook
        system( @args );
    }

    # Delete the old version of the content
    if ( $has_changed ) {
        unlink $old_filename;
    }

}
